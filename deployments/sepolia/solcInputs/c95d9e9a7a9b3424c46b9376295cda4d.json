{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n\nerror FundMe_NotOwner();\n\n/**\n * @title A contract for crowd funding\n * @author Isha Garg\n * @notice This contract is to demo a sample funding contract\n * @dev This implements price feeds as our library\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MIN_USD = 50 * 1e18;\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address private immutable i_owner;\n    AggregatorV3Interface private s_priceFeed;\n\n    // Modifier: a keyword that we can add in the function to modify the func with that functionality\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) revert FundMe_NotOwner();\n        _; // execute rest of the func\n    }\n\n    // get called immediately whenever you deploy the contract\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MIN_USD,\n            \"Didn't send enough money!\"\n        );\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    // withdraw funds\n    function withdraw() public payable onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        // reset the funders array\n        s_funders = new address[](0);\n        // withdraw the funds\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    // we're gonna code a cheaper withdraw to save gas\n    function cheaperWithdraw() public payable onlyOwner {\n        //we're gonna read the s_funders into memory one time\n        //and then we're gonna keep reading it from memory every time -> cheaper\n        address[] memory funders = s_funders;\n        // mappings can't be in memory, oops!\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(callSuccess);\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 funderIndex) public view returns (address) {\n        return s_funders[funderIndex];\n    }\n\n    function getAddressToAmountFunded(\n        address funder\n    ) public view returns (uint256) {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    // function to get price of ETH in terms of USD\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH in terms of USD\n        // price has 8 decimal places (check chainlink documentation) msg.Value has 18 decimal places\n        return uint256(price * 1e10); // 1**10\n    }\n\n    // function to get the conversion rate\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        return (ethAmount * ethPrice) / 1e18; // since both ethAmount and ethPrice have 18 decimals it would make it 36\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}